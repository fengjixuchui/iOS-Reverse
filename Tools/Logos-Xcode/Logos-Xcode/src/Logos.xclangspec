// Logos xclangspec was generated by spec_gen
// Script made by pr0crustes
(
    {
        Identifier = "xcode.lang.string.logos";
        Syntax = {
            Start = "@\"";
            EscapeChar = "\\";
            End = "\"";
            AltEnd = "\n";
            Type = "xcode.syntax.string";
        };
    },
    {
        Identifier = "xcode.lang.logos.identifier";
        Syntax = {
            StartChars = "@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
            Words = (
				// Start Logos Keywords
				"%group",
				"%hook",
				"%new",
				"%subclass",
				"%property",
				"%end",
				"%config",
				"%hookf",
				"%ctor",
				"%dtor",
				"%init",
				"%class",
				"%c",
				"%orig",
				"%log",
				// End Logos Keywords
				// Start Other Keywords
				"NSLog",
				"NSString",
				"NSInteger",
				"NSObject",
				// End Other Keywords
                "__alignof",
                "__alignof__",
                "__asm",
                "__asm__",
                "__attribute",
                "__attribute__",
                "__block",
                "__builtin_choose_expr",
                "__builtin_offsetof",
                "__builtin_types_compatible_p",
                "__builtin_va_arg",
                "__complex",
                "__complex__",
                "__const",
                "__const__",
                "__extension__",
                "__func__",
                "__imag",
                "__imag__",
                "__label__",
                "__nonnull",
                "__nullable",
                "__null_unspecified",
                "__real",
                "__real__",
                "__restrict",
                "__restrict__",
                "__signed",
                "__signed__",
                "__thread",
                "__typeof",
                "__typeof__",
                "__unused",
                "__volatile",
                "__volatile__",
                "__FUNCTION__",
                "__PRETTY_FUNCTION__",
                "_Bool",
                "_Complex",
                "_Decimal32",
                "_Decimal64",
                "_Decimal128",
                "_Imaginary",
                "_Nonnull",
                "_Nullable",
                "_Null_unspecified",
                "asm",
                "auto",
                "bool",
                "break",
                "case",
                "char",
                "const",
                "continue",
                "default",
                "do",
                "double",
                "else",
                "enum",
                "extern",
                "false",
                "float",
                "for",
                "goto",
                "if",
                "inline",
                "int",
                "long",
                "register",
                "restrict",
                "return",
                "short",
                "signed",
                "sizeof",
                "static",
                "struct",
                "switch",
                "true",
                "typedef",
                "typeof",
                "union",
                "unsigned",
                "void",
                "volatile",
                "while",
                "FALSE",
                "NULL",
                "TRUE",
                "_cmd",
                "__autoreleasing",
                "__bridge",
                "__bridge_transfer",
                "__bridge_retained",
                "__kindof",
                "__covariant",
                "__strong",
                "__unsafe_unretained",
                "__weak",
                "@autoreleasepool",
                "@available",
                "@catch",
                "@class",
                "@compatibility_alias",
                "@defs",
                "@dynamic",
                "@encode",
                "@end",
                "@finally",
                "@implementation",
                "@import",
                "@interface",
                "@optional",
                "@package",
                "@private",
                "@property",
                "@protected",
                "@protocol",
                "@public",
                "@required",
                "@selector",
                "@synchronized",
                "@synthesize",
                "@throw",
                "@try",
                "bycopy",
                "byref",
                "in",
                "inout",
                "oneway",
                "out",
                "BOOL",
                "IBAction",
                "IBInspectable",
                "IBOutlet",
                "IBOutletCollection",
                "IB_DESIGNABLE",
                "IMP",
                "nonnull",
                "nullable",
                "null_unspecified",
                "NO",
                "NS_DURING",
                "NS_ENDHANDLER",
                "NS_HANDLER",
                "NS_VALUERETURN",
                "NS_VOIDRETURN",
                "Nil",
                "SEL",
                "YES",
                "id",
                "nil",
                "self",
                "super",
                "instancetype",
            );
            Type = "xcode.syntax.keyword";
            AltType = "xcode.syntax.identifier";    // non-keywords are identifiers
        };
    },
    {
        Identifier = "xcode.lang.logos.interestingOperators";
        Syntax = {
            Words = (
                "...",
                "->",
                ".",
             );
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.logos";
        Description = "Objective-C Coloring";
        BasedOn = "xcode.lang.c";
        IncludeInMenu = YES;
        UsesCLikeIndentation = YES;
        Name = "Objective-C";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer.toplevel";
            IncludeRules = (
                "xcode.lang.logos.enumblock",
                "xcode.lang.logos.nsenumblock",
                "xcode.lang.logos.structblock",
                "xcode.lang.logos.unionblock",
                "xcode.lang.logos.block.toplevel",
                "xcode.lang.logos.array.literal",
                "xcode.lang.logos.dictionary.literal",
                "xcode.lang.logos.expression.literal",
                "xcode.lang.logos.bracketexpr",
                "xcode.lang.logos.parenexpr",
                "xcode.lang.logos.interface",
                "xcode.lang.logos.implementation",
                "xcode.lang.logos.protocol",
                "xcode.lang.logos.protocol.reference",
                "xcode.lang.logos.function.declaration",
                "xcode.lang.logos.function.definition",
                "xcode.lang.logos.property.declaration",
                "xcode.lang.logos.typedef",
                "xcode.lang.logos.initializer",
                "xcode.lang.logos.import",
            );
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.logos.block.toplevel";
        BasedOn = "xcode.lang.c.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer.toplevel";
            Start = "{";
            End = "}";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.logos.block",
                "xcode.lang.logos.array.literal",
                "xcode.lang.logos.dictionary.literal",
                "xcode.lang.logos.expression.literal",
                "xcode.lang.logos.bracketexpr",
                "xcode.lang.logos.parenexpr",
                "xcode.lang.logos.interface",
                "xcode.lang.logos.implementation",
                "xcode.lang.logos.protocol",
                "xcode.lang.logos.protocol.reference",
                "xcode.lang.logos.function.declaration",
                "xcode.lang.logos.function.definition",
                "xcode.lang.logos.property.declaration",
                "xcode.lang.logos.typedef",
                "xcode.lang.logos.initializer",
            );
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.logos.import";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "@import",
                "xcode.lang.logos.identifier",
            );
            Type = "xcode.syntax.logos.import";
        };
    },
    {
        Identifier = "xcode.lang.logos.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.logos",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.logos.identifier",
                "xcode.lang.logos.array.literal.start",
                "xcode.lang.logos.dictionary.literal.start",
                "xcode.lang.logos.expression.literal.start",
                "xcode.lang.number",
                "xcode.lang.logos.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.literal.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.logos",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.logos.identifier",
                "xcode.lang.logos.array.literal.start",
                "xcode.lang.logos.array.literal.end",
                "xcode.lang.logos.dictionary.literal.start",
                "xcode.lang.logos.dictionary.literal.end",
                "xcode.lang.logos.expression.literal.start",
                "xcode.lang.logos.expression.literal.end",
                "xcode.lang.number",
                "xcode.lang.logos.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.lexer.toplevel";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.logos",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.logos.interface.declarator",
                "xcode.lang.logos.implementation.declarator",
                "xcode.lang.logos.protocol.declarator",
                "xcode.lang.logos.property.declarator",
                "xcode.lang.logos.identifier",
                "xcode.lang.logos.array.literal.start",
                "xcode.lang.logos.dictionary.literal.start",
                "xcode.lang.logos.expression.literal.start",
                "xcode.lang.number",
                "xcode.lang.logos.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.implementation.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "@implementation",
                "xcode.lang.logos.classnameclause",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.logos.interface.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "@interface",
                "xcode.lang.logos.classnameclause",
                ":?",
                "xcode.lang.logos.classname?",
                "xcode.lang.logos.protocolclause?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.logos.protocol.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "@protocol",
                "xcode.lang.logos.protocolname",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.logos.classnameclause";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.classname",
                "xcode.lang.logos.genericsclause?",
                "xcode.lang.logos.categoryclause?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.logos.classname";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.genericsclause";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Start = "<";
            End = ">";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.logos.block",
                "xcode.lang.logos.bracketexpr",
                "xcode.lang.logos.parenexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.protocolname";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.protocol.openangle";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "<",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.protocol.closeangle";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                ">",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.protocolclause";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.protocol.openangle",
                "xcode.lang.logos.protocolname",
                "xcode.lang.logos.protocol.protocollist*",
                "xcode.lang.logos.protocol.closeangle",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.categoryname";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.category.openparen";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "(",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.category.closeparen";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                ")",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.categoryclause";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.category.openparen",
                "xcode.lang.logos.categoryname?",
                "xcode.lang.logos.category.closeparen"
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.protocol";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer.toplevel";
            Start = "xcode.lang.logos.protocol.declarator";
            End = "@end";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.logos.function.declaration",
                "xcode.lang.logos.method.declaration",
                "xcode.lang.logos.classmethod.declaration",
                "xcode.lang.logos.property.declaration",
                "xcode.lang.logos.block",
                "xcode.lang.logos.bracketexpr",
                "xcode.lang.logos.parenexpr",
            );
            Type = "xcode.syntax.declaration.protocol";
        };
    },
    {
        Identifier = "xcode.lang.logos.protocol.reference";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer.toplevel";
            Rules = (
                "xcode.lang.logos.protocol.declarator",
                "xcode.lang.logos.protocol.protocollist*",
                ";",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.protocol.protocollist";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                ",",
                "xcode.lang.logos.protocolname",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.interface";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer.toplevel";
            Start = "xcode.lang.logos.interface.declarator";
            End = "@end";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.logos.function.declaration",
                "xcode.lang.logos.method.declaration",
                "xcode.lang.logos.classmethod.declaration",
                "xcode.lang.logos.property.declaration",
                "xcode.lang.logos.typedef",
                "xcode.lang.logos.block",
                "xcode.lang.logos.bracketexpr",
                "xcode.lang.logos.parenexpr",
            );
            Type = "xcode.syntax.declaration.logos.interface";
        };
    },
    {
        Identifier = "xcode.lang.logos.implementation";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer.toplevel";
            Start = "xcode.lang.logos.implementation.declarator";
            End = "@end";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.logos.function.declaration",
                "xcode.lang.logos.function.definition",
                "xcode.lang.logos.method.definition",
                "xcode.lang.logos.classmethod.definition",
                "xcode.lang.logos.property.implementation.synthesize",
                "xcode.lang.logos.property.implementation.dynamic",
                "xcode.lang.logos.typedef",
                "xcode.lang.logos.block",
                "xcode.lang.logos.bracketexpr",
                "xcode.lang.logos.parenexpr",
                "xcode.lang.logos.initializer",
            );
            Type = "xcode.syntax.definition.logos.implementation";
        };
    },
    {
        Identifier = "xcode.lang.logos.method.minus";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = ( "-", );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.method.plus";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = ( "+", );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.method.colon";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = ( ":", );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.partialname";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = ( "xcode.lang.logos.identifier", );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.method.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.method.declarator",
                "xcode.lang.logos.declaration.attribute*",
                ";",
            );
            Type = "xcode.syntax.declaration.method";
        };
    },
    {
        Identifier = "xcode.lang.logos.declaration.attribute";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.identifier",
                "xcode.lang.logos.parenexpr?",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.method.definition";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.method.declarator",
                ";?",
                "xcode.lang.logos.block",
            );
            Type = "xcode.syntax.definition.method";
        };
    },
    {
        Identifier = "xcode.lang.logos.method.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.method.minus",
                "xcode.lang.logos.parenexpr?",
                "xcode.lang.logos.partialname",
                "xcode.lang.logos.method.declarator.args?",
            );
            Type = "xcode.syntax.method.declarator";
        };
    },
    {
        Identifier = "xcode.lang.logos.classmethod.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.classmethod.declarator",
                "xcode.lang.logos.declaration.attribute*",
                ";",
            );
            Type = "xcode.syntax.declaration.method";
        };
    },
    {
        Identifier = "xcode.lang.logos.classmethod.definition";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.classmethod.declarator",
                ";?",
                "xcode.lang.logos.block",
            );
            Type = "xcode.syntax.definition.method";
        };
    },
    {
        Identifier = "xcode.lang.logos.classmethod.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.method.plus",
                "xcode.lang.logos.parenexpr?",
                "xcode.lang.logos.partialname",
                "xcode.lang.logos.method.declarator.args?",
            );
            Type = "xcode.syntax.method.declarator";
        };
    },
    {
        Identifier = "xcode.lang.logos.method.declarator.args";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.method.colon",
                "xcode.lang.logos.parenexpr?",
                "xcode.lang.logos.attributes?",
                "xcode.lang.logos.identifier",
                "xcode.lang.logos.method.declarator.moreargs*",
                "xcode.lang.logos.method.declarator.varargs?",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.attributes";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "__attribute__|__attribute|__unused",
                "xcode.lang.logos.parenexpr?",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.method.declarator.moreargs";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.partialname?",
                "xcode.lang.logos.method.colon",
                "xcode.lang.logos.parenexpr?",
                "xcode.lang.logos.attributes?",
                "xcode.lang.logos.identifier",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.method.declarator.varargs";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                ",",
                "...",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.function.definition";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.function.declarator",
                "xcode.lang.logos.block",
            );
            Type = "xcode.syntax.definition.c.function";
        };
    },
    {
        Identifier = "xcode.lang.logos.function.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.function.declarator",
                "xcode.lang.logos.declaration.attribute*",
                ";"
            );
            Type = "xcode.syntax.declaration.c.function";
        };
    },
    {
        Identifier = "xcode.lang.logos.function.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.function.name",
                "xcode.lang.logos.parenexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.function.name";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.property.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.logos",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.logos.property.end",
                "xcode.lang.logos.identifier",
                "xcode.lang.number",
                "xcode.lang.logos.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.property.name.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.logos",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.logos.property.name",
                "xcode.lang.logos.identifier",
                "xcode.lang.number",
                "xcode.lang.logos.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.property.comma";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = ( ",", );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.property.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.logos.property.lexer";
            Start = "xcode.lang.logos.property.declarator";
            End = "xcode.lang.logos.property.end";
            AltEnd = ";";
            Type = "xcode.syntax.declaration.property";
        };
    },
    {
        Identifier = "xcode.lang.logos.property.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "@property",
                "xcode.lang.logos.property.options?",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.property.end";
        Syntax = {
            Tokenizer = "xcode.lang.logos.property.name.lexer";
            Rules = (
                "xcode.lang.logos.property.name",
                "xcode.lang.logos.property.morenames?",
                ";",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.logos.property.name";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.property.name.actual",
                "xcode.lang.logos.property.name.ivarextra?",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.property.morenames";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.property.namelist+",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.property.namelist";
        Syntax = {
            Tokenizer = "xcode.lang.logos.property.name.lexer";
            Rules = (
                "xcode.lang.logos.property.comma",
                "xcode.lang.logos.property.name",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.property.name.actual";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.property.name.ivarextra";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Start = "=";
            End = "xcode.lang.logos.identifier";
        };
    },
    {
        Identifier = "xcode.lang.logos.property.options";
        Syntax = {
            Tokenizer = "xcode.lang.logos.property.options.lexer";
            Start = "(";
            End = ")";
            AltEnd = ";";
            Recursive = YES;
        };
    },
    {
        Identifier = "xcode.lang.logos.property.options.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string.logos",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.logos.property.options.identifier",
                "xcode.lang.logos.identifier",
                "xcode.lang.number",
                "xcode.lang.logos.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.property.options.identifier";
        Syntax = {
            StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
            Words = (
                "atomic",
                "setter",
                "getter",
                "readonly",
                "readwrite",
                "assign",
                "retain",
                "copy",
                "nonatomic",
                "weak",
                "strong",
                "unsafe_unretained",
                "nonull",
                "nullable",
                "null_resettable",
                "null_unspecified",
             );
            Type = "xcode.syntax.keyword";
            AltType = "xcode.syntax.identifier";    // non-keywords are identifiers
        };
    },
    {
        Identifier = "xcode.lang.logos.property.implementation.synthesize";
        Syntax = {
            Tokenizer = "xcode.lang.logos.property.lexer";
            Start = "@synthesize";
            End = "xcode.lang.logos.property.end";
            AltEnd = ";";
            Type = "xcode.syntax.declaration.property";
        };
    },
    {
        Identifier = "xcode.lang.logos.property.implementation.dynamic";
        Syntax = {
            Tokenizer = "xcode.lang.logos.property.lexer";
            Start = "@dynamic";
            End = "xcode.lang.logos.property.end";
            AltEnd = ";";
            Type = "xcode.syntax.declaration.property";
        };
    },
    {
        Identifier = "xcode.lang.logos.lexer.typedef";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.logos.typedef.end",
                "xcode.lang.logos.identifier",
                "xcode.lang.number",
                "xcode.lang.logos.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.lexer.typedef.name";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.logos.typedef.name",
                "xcode.lang.logos.identifier",
                "xcode.lang.number",
                "xcode.lang.logos.typedef.function.caret",
                "xcode.lang.logos.typedef.function.start",
                "xcode.lang.logos.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.typedef";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer.typedef";
            Start = "typedef";
            End = "xcode.lang.logos.typedef.end";
            AltEnd = ";";
            IncludeRules = (
                "xcode.lang.logos.enumblock",
                "xcode.lang.logos.nsenumblock",
                "xcode.lang.logos.structblock",
                "xcode.lang.logos.unionblock",
                "xcode.lang.logos.typedef.function",
                "xcode.lang.logos.block",
                "xcode.lang.logos.bracketexpr",
            );
            Type = "xcode.syntax.typedef";
        };
    },
    {
        Identifier = "xcode.lang.logos.typedef.name";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.typedef.end";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer.typedef.name";
            Rules = (
                "xcode.lang.logos.typedef.name",
                ";"
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.logos.typedef.function";
        Syntax = {
            Start = "(";
            End = ")";
            IncludeRules = (
                "xcode.lang.logos.bracketexpr",
                "xcode.lang.logos.block",
                "xcode.lang.logos.parenexpr",
                "xcode.lang.logos.typedef.function.star",
                "xcode.lang.logos.typedef.function.caret",
            );
            Tokenizer = "xcode.lang.logos.lexer.typedef.name";
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.logos.typedef.function.star";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer.typedef.name";
            Rules = (
                "*",
                "xcode.lang.logos.typedef.name",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.logos.typedef.function.caret";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer.typedef.name";
            Rules = (
                "^",
                "xcode.lang.logos.typedef.name",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.logos.block";
        BasedOn = "xcode.lang.c.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.logos.array.literal",
                "xcode.lang.logos.dictionary.literal",
                "xcode.lang.logos.expression.literal",
                "xcode.lang.logos.bracketexpr",
                "xcode.lang.logos.parenexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.typeblock";
        BasedOn = "xcode.lang.c.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.logos.array.literal",
                "xcode.lang.logos.dictionary.literal",
                "xcode.lang.logos.expression.literal",
                "xcode.lang.logos.bracketexpr",
                "xcode.lang.logos.parenexpr",
                "xcode.lang.logos.structblock",
                "xcode.lang.logos.unionblock",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.enumblock";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.enum.declarator",
                "xcode.lang.logos.block",
            );
            Type = "xcode.syntax.declaration.enum";
        };
    },
    {
        Identifier = "xcode.lang.logos.enum.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "enum",
                "xcode.lang.logos.enum.name?",
                ":?",
                "xcode.lang.logos.typeidentifier*",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.logos.nsenumblock";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.nsenum.declarator",
                "xcode.lang.logos.block",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.logos.nsenum.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "NS_ENUM",
                "(",
                "xcode.lang.logos.identifier",
                ",",
                "xcode.lang.logos.enum.name",
                ")",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.logos.enum.name";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.structblock";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.struct.declarator",
                "xcode.lang.logos.typeblock",
            );
            Type = "xcode.syntax.declaration.struct";
        };
    },
    {
        Identifier = "xcode.lang.logos.struct.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "struct",
                "xcode.lang.logos.struct.name?",
                ":?",
                "xcode.lang.logos.typeidentifier*",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.logos.struct.name";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.unionblock";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.union.declarator",
                "xcode.lang.logos.typeblock",
            );
            Type = "xcode.syntax.declaration.union";
        };
    },
    {
        Identifier = "xcode.lang.logos.union.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "union",
                "xcode.lang.logos.union.name?",
                ":?",
                "xcode.lang.logos.typeidentifier*",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.logos.union.name";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.logos.typeidentifier";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (
                "xcode.lang.logos.identifier|int|char|float|double|short|long|unsigned|signed",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.parenexpr";
        BasedOn = "xcode.lang.c.parenexpr";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Start = "(";
            End = ")";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.logos.array.literal",
                "xcode.lang.logos.dictionary.literal",
                "xcode.lang.logos.expression.literal",
                "xcode.lang.logos.bracketexpr",
                "xcode.lang.logos.block",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.bracketexpr";
        BasedOn = "xcode.lang.c.bracketexpr";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Start = "[";
            End = "]";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.logos.array.literal",
                "xcode.lang.logos.dictionary.literal",
                "xcode.lang.logos.expression.literal",
                "xcode.lang.logos.parenexpr",
                "xcode.lang.logos.block",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.initializer";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer.toplevel";
            Start = "=";
            End = ";";
            Recursive = NO;
            IncludeRules = (
                "xcode.lang.logos.block",
                "xcode.lang.logos.array.literal",
                "xcode.lang.logos.dictionary.literal",
                "xcode.lang.logos.expression.literal",
                "xcode.lang.logos.parenexpr",
                "xcode.lang.logos.bracketexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.array.literal";
        Syntax = {
            Tokenizer = "xcode.lang.logos.literal.lexer";
            Start = "@[";
            End = "xcode.lang.logos.array.literal.end";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.logos.dictionary.literal",
                "xcode.lang.logos.expression.literal",
                "xcode.lang.logos.bracketexpr",
                "xcode.lang.logos.parenexpr",
                "xcode.lang.logos.block",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.array.literal.start";
        Syntax = {
            Words = ("@[",);
            Type = "xcode.syntax.number";
        };
    },
    {
        Identifier = "xcode.lang.logos.array.literal.end";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = ("]",);
            Type = "xcode.syntax.number";
        };
    },
    {
        Identifier = "xcode.lang.logos.dictionary.literal";
        Syntax = {
            Tokenizer = "xcode.lang.logos.literal.lexer";
            Start = "@{";
            End = "xcode.lang.logos.dictionary.literal.end";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.logos.array.literal",
                "xcode.lang.logos.expression.literal",
                "xcode.lang.logos.bracketexpr",
                "xcode.lang.logos.parenexpr",
                "xcode.lang.logos.block",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.dictionary.literal.start";
        Syntax = {
            Words = ("@{",);
            Type = "xcode.syntax.number";
        };
    },
    {
        Identifier = "xcode.lang.logos.dictionary.literal.end";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = ("}",);
            Type = "xcode.syntax.number";
        };
    },
    {
        Identifier = "xcode.lang.logos.expression.literal";
        Syntax = {
            Tokenizer = "xcode.lang.logos.literal.lexer";
            Start = "@(";
            End = "xcode.lang.logos.expression.literal.end";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.logos.array.literal",
                "xcode.lang.logos.dictionary.literal",
                "xcode.lang.logos.bracketexpr",
                "xcode.lang.logos.parenexpr",
                "xcode.lang.logos.block",
            );
        };
    },
    {
        Identifier = "xcode.lang.logos.expression.literal.start";
        Syntax = {
            Words = ("@(",);
            Type = "xcode.syntax.number";
        };
    },
    {
        Identifier = "xcode.lang.logos.expression.literal.end";
        Syntax = {
            Tokenizer = "xcode.lang.logos.lexer";
            Rules = (")",);
            Type = "xcode.syntax.number";
        };
    },
)
